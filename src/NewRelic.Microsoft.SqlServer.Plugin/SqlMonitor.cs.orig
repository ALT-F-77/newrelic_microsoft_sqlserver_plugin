using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using NewRelic.Microsoft.SqlServer.Plugin.Core;

namespace NewRelic.Microsoft.SqlServer.Plugin
{
<<<<<<< HEAD
    /// <summary>
    ///     Periodically polls SQL databases and reports the data back to a collector.
    /// </summary>
    public class SqlMonitor
    {
        private readonly string _connectionString;
=======
	/// <summary>
	/// Periodically polls SQL databases and reports the data back to a collector.
	/// </summary>
	internal class SqlMonitor
	{
		private readonly string _connectionString;
>>>>>>> Added QueryTypes for the three SQL views Mike added

        public SqlMonitor(string server, string database)
        {
            _connectionString = string.Format("Server={0};Database={1};Trusted_Connection=True;", server, database);
        }

<<<<<<< HEAD
        public void Start()
        {
            // TODO Polling
            GetQueryStats();
        }


        /// <summary>
        ///     Example query to test Dapper
        /// </summary>
        private void GetQueryStats()
        {
            IEnumerable<QueryStat> queryStats;
            Console.Out.WriteLine("Connecting with {0}", _connectionString);
            using (var conn = new SqlConnection(_connectionString))
            {
                queryStats = conn.Query<QueryStat>(QueryStat.Query, new {Id = 1});
            }
=======
		public void Start()
		{
			var queries = new QueryLocator(new DapperWrapper()).PrepareQueries();

			// TODO Polling
			QueryDatabases(queries);
		}


		/// <summary>
		/// Example query to test Dapper
		/// </summary>
		/// <param name="queries"></param>
		private void QueryDatabases(IEnumerable<Func<IDbConnection, IEnumerable<object>>> queries)
		{
			Console.Out.WriteLine("Connecting with {0}", _connectionString);
			using (var conn = new SqlConnection(_connectionString))
			{
				foreach (var query in queries)
				{
					var results = query(conn);
					foreach (var result in results)
					{
						Console.Out.WriteLine(result);
					}
					Console.Out.WriteLine();
				}
			}
		}
>>>>>>> Added QueryTypes for the three SQL views Mike added

            foreach (QueryStat queryStat in queryStats)
            {
                Console.Out.WriteLine("{0}\t{1}\t{2}", queryStat.statement_start_offset, queryStat.creation_time,
                                      queryStat.last_execution_time);
            }
        }

        public void Stop()
        {
            // TODO Stop Polling
        }
    }
}
